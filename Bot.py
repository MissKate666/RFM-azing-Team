# === Bot.py: –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è RFM-–∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ===
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞: —Ä–∞–±–æ—Ç–∞ —Å –ë–î, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —è–∑—ã–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

import logging
import os
import psycopg2
import pandas as pd
import aiohttp
from datetime import datetime, timedelta
import pytz
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.error import BadRequest, RetryAfter
import smtplib
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
import RFM  # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è RFM.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ RFM
from Model import Gemini
import re
from VectorSearch import init_recommendations, find_recommendations
from telegram.error import RetryAfter, BadRequest


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: Telegram-—Ç–æ–∫–µ–Ω, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
TOKEN = '8062418222:AAEdIVP15v0jMN11BeoWo1LG0i6WWceAGb8'
DB_PARAMS = {
    "dbname": "RFM_Databases",
    "user": "postgres",
    "password": "Ip1011228",
    "host": "localhost",
    "port": 5432
}
DEVELOPER_EMAIL = "katrin.planshet@gmail.com"  # Email –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
SMTP_EMAIL = "katrin.planshet@gmail.com"  # Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
SMTP_PASSWORD = "cgqg yiem lnib klqv"  # –ü–∞—Ä–æ–ª—å –¥–ª—è SMTP (–Ω—É–∂–µ–Ω App Password –¥–ª—è Gmail)


# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ===
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (RU/EN)
# --- –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π ---
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ (ru, en) —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
LANGUAGES = {
    'ru': {
        'welcome': "üëã –ü—Ä–∏–≤–µ—Ç, {name}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'about':  "üë• –ö–æ–º–∞–Ω–¥–∞ \"RFM-azing Team\" —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞, "
            "—É–º–µ—é—â–µ–≥–æ –≥–ª—É–±–æ–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –¥–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ—Å—Ç–∞ –≤–∞—à–µ–π –ø—Ä–∏–±—ã–ª–∏.",
        'help': "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ üìä ‚Äî –∞–Ω–∞–ª–∏–∑ CSV: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
            "‚Ä¢ üïì ‚Äî –∏—Å—Ç–æ—Ä–∏—è: –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
            "‚Ä¢ üóë ‚Äî –æ—á–∏—Å—Ç–∫–∞: –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n"
            "‚Ä¢ üåê ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞: –ø–æ–º–µ–Ω—è–π—Ç–µ –≤–∞—à —è–∑—ã–∫ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.\n"
            "‚Ä¢ ‚ôªÔ∏è ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏.\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            "- –¢–∏–º–ª–∏–¥: dinizavrik.tata@gmail.com\n"
            "- –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: Kseniavasilchenko@mail.ru",
        'history_empty': "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.",
        'history': "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:",
        'confirm_clear': "‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        'cleared': "‚úÖ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
        'cancel_clear': "‚ùé –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'spam': "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        'mute_message': "üö´ –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –∑–∞ —Å–ø–∞–º (30 —Å–µ–∫).",
        'csv_request': "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è RFM-–∞–Ω–∞–ª–∏–∑–∞.",
        'csv_success': "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã RFM-–∞–Ω–∞–ª–∏–∑–∞:",
        'csv_loaded': "‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
        'csv_format_choice': "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
        'table_button': "–¢–∞–±–ª–∏—Ü–∞",
        'diagram_button': "–î–∏–∞–≥—Ä–∞–º–º–∞",
        'text_button': "–¢–µ–∫—Å—Ç",
        'csv_error': "‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:",
        'use_buttons': "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
        'yes_button': "‚úÖ –î–∞",
        'no_button': "‚ùå –ù–µ—Ç",
        'cancel_button': "‚ùå –û—Ç–º–µ–Ω–∞",
        'cancel_timezone': "‚ùé –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.",
        'set_city': "–ò—Å—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, —á—Ç–æ–±—ã —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        'keep_moscow': "–û—Å—Ç–∞–≤–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        'invalid_city': "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'change_timezone': "–ü–æ–º–µ–Ω—è—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        'filter_day': "–ü–æ –¥–Ω—è–º",
        'filter_week': "–ü–æ –Ω–µ–¥–µ–ª—è–º",
        'filter_month': "–ü–æ –º–µ—Å—è—Ü–∞–º",
        'timezone_set': "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}.",
        'error_message': "‚ùó –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
        'db_error': "‚ùó –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'geocoder_error': "‚ùó –°–µ—Ä–≤–∏—Å —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ—Å–∫–æ–≤—Å–∫–∏–π –ø–æ—è—Å.",
        'retry_message': "‚ùó –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds} —Å–µ–∫.",
        'corrections_message': "‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö:",
        'next_page': "‚ñ∂ –°–ª–µ–¥—É—é—â–∞—è",
        'prev_page': "‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
        'feedback_request': "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–∞ –ø–æ—á—Ç—É.",
        'feedback_sent': "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.",
        'feedback_error': "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'language_changed': "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang}.",
        'menu': [["üìä –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏–∑–Ω–µ—Å–∞"], ["‚ÑπÔ∏è –û –Ω–∞—Å", "üÜò –ü–æ–º–æ—â—å"], ["üïì –ò—Å—Ç–æ—Ä–∏—è", "üóë –û—á–∏—Å—Ç–∫–∞"],
                 ["üåê –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Change Language"]]
    },
    'en': {
        'welcome': "üëã Hi, {name}! I'm a data analysis bot. Choose an option:",
        'about': "üë• The \"RFM-azing Team\" develops an intelligent assistant capable of analyzing customer interactions "
            "and providing actionable insights to increase your business profits.",
        'help': "üìå Commands:\n"
            "‚Ä¢ üìä ‚Äî CSV Analysis: upload files for deep customer data analysis.\n"
            "‚Ä¢ üïì ‚Äî History: review previous queries and results.\n"
            "‚Ä¢ üóë ‚Äî Clear: clean up your activity history.\n"
            "‚Ä¢ üåê ‚Äî Language change: Changes the language from English to Russian.\n"
            "‚Ä¢ ‚ôªÔ∏è ‚Äî Feedback: share your suggestions and comments.\n\n"
            "üìû Contacts:\n"
            "- Team Lead: dinizavrik.tata@gmail.com\n"
            "- Assistant: Kseniavasilchenko@mail.ru",
        'history_empty': "No history found.",
        'history': "üìú Chat history:",
        'confirm_clear': "‚ö†Ô∏è Delete chat history? This cannot be undone.",
        'cleared': "‚úÖ Chat history deleted.",
        'cancel_clear': "‚ùé Deletion canceled.",
        'spam': "‚è≥ Wait before sending another message.",
        'mute_message': "üö´ Muted for spamming (30 sec).",
        'csv_request': "üìÅ Upload a CSV file for RFM analysis.",
        'csv_success': "‚úÖ RFM Analysis Results:",
        'csv_loaded': "‚úÖ Data loaded:",
        'csv_format_choice': "File uploaded. Choose how to view the results:",
        'table_button': "Table",
        'diagram_button': "Diagram",
        'text_button': "Text",
        'csv_error': "‚ùó File processing error:",
        'use_buttons': "‚ùó Use the buttons.",
        'yes_button': "‚úÖ Yes",
        'no_button': "‚ùå No",
        'cancel_button': "‚ùå Cancel",
        'cancel_timezone': "‚ùé City input canceled.",
        'set_city': "History is stored in Moscow time. To store it in your timezone, enter your city:",
        'keep_moscow': "Keep Moscow timezone",
        'invalid_city': "‚ùó Could not determine timezone for city: {city}. Try again.",
        'change_timezone': "Change timezone",
        'filter_day': "By days",
        'filter_week': "By weeks",
        'filter_month': "By months",
        'timezone_set': "‚úÖ Timezone set: {timezone}.",
        'error_message': "‚ùó An error occurred, please try again later.",
        'db_error': "‚ùó Database connection error. Please try again later.",
        'geocoder_error': "‚ùó Timezone service unavailable. Try again or choose Moscow timezone.",
        'retry_message': "‚ùó Too many requests. Wait {seconds} seconds and try again.",
        'corrections_message': "‚úèÔ∏è Data corrections:",
        'next_page': "‚ñ∂ Next",
        'prev_page': "‚óÄ Previous",
        'feedback_request': "üìù Write your feedback or suggestion about the bot.\n‚ö†Ô∏è Warning: Your message will be sent to developers.",
        'feedback_sent': "‚úÖ Thank you! Your message has been sent to the developers.",
        'feedback_error': "‚ùó Error sending your message. Please try again later.",
        'language_changed': "‚úÖ Language changed to {lang}.",
        'menu': [["üìä Customer Business Evaluation"], ["‚ÑπÔ∏è About Us", "üÜò Help"], ["üïì History", "üóë Clear"],
                 ["üåê Suggestions and Feedback", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Change Language"]]
    }
}


# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
# –í–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –æ—à–∏–±–æ–∫
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# === –†–∞–±–æ—Ç–∞ —Å PostgreSQL ===
# –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    try:
        return psycopg2.connect(**DB_PARAMS)
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    timezone TEXT DEFAULT 'Europe/Moscow',
                    timezone_set BOOLEAN DEFAULT FALSE
                );
                CREATE TABLE IF NOT EXISTS messages_history (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    message TEXT,
                    timestamp TIMESTAMP
                );
                CREATE TABLE IF NOT EXISTS muted_users (
                    user_id BIGINT PRIMARY KEY,
                    mute_time TIMESTAMP,
                    unmute_time TIMESTAMP
                );
                CREATE TABLE IF NOT EXISTS last_message_time (
                    user_id BIGINT PRIMARY KEY,
                    last_time TIMESTAMP
                );
            """)
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def save_user(user_id, username, first_name, timezone='Europe/Moscow', timezone_set=False):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users (id, username, first_name, timezone, timezone_set)
                VALUES (%s, %s, %s, %s, %s)
                ON CONFLICT (id) DO UPDATE
                SET username = EXCLUDED.username, first_name = EXCLUDED.first_name,
                    timezone = EXCLUDED.timezone, timezone_set = EXCLUDED.timezone_set
            """, (user_id, username, first_name, timezone, timezone_set))
            conn.commit()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
def save_message(user_id, message):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO messages_history (user_id, message, timestamp) VALUES (%s, %s, %s)",
                    (user_id, message, datetime.now(pytz.UTC))
                )
                conn.commit()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è user_id {user_id}: {message}")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT timestamp, message FROM messages_history WHERE user_id = %s ORDER BY timestamp DESC",
                        (user_id,))
            return cur.fetchall()

# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def clear_history(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM messages_history WHERE user_id = %s", (user_id,))
            conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —Å–ø–∞–º
def is_muted(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM muted_users WHERE user_id = %s AND unmute_time < %s",
                        (user_id, datetime.now(pytz.UTC)))
            cur.execute("SELECT unmute_time FROM muted_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            conn.commit()
            return result and result[0].replace(tzinfo=pytz.UTC) > datetime.now(pytz.UTC)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–ø–∞–º
def mute_user(user_id, duration=30):
    mute_time = datetime.now(pytz.UTC)
    unmute_time = mute_time + timedelta(seconds=duration)
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO muted_users (user_id, mute_time, unmute_time) VALUES (%s, %s, %s)",
                        (user_id, mute_time, unmute_time))
            conn.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {unmute_time}")

# –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
def get_recent_message_count(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute(
                "SELECT COUNT(*) FROM messages_history WHERE user_id = %s AND timestamp >= NOW() - INTERVAL '30 seconds'",
                (user_id,))
            return cur.fetchone()[0]

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_last_message_time(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO last_message_time (user_id, last_time) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET last_time = %s",
                (user_id, datetime.now(pytz.UTC), datetime.now(pytz.UTC)))
            conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_timezone(user_id):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT timezone, timezone_set FROM users WHERE id = %s", (user_id,))
            result = cur.fetchone()
            return result[0] if result else 'Europe/Moscow', result[1] if result else False


# === –Ø–∑—ã–∫ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
# –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —è–∑—ã–∫–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–º –∏ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º ---
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_language(context, user_id):
    lang = context.user_data.get("lang", 'ru')
    if lang not in LANGUAGES:
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫ {lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è 'ru'")
        context.user_data["lang"] = 'ru'
        return 'ru'
    return lang

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def set_language(context, lang, user_name):
    if lang in LANGUAGES:
        context.user_data["lang"] = lang
        logger.info(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {lang} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context._user_id}")
        lang_name = "–†—É—Å—Å–∫–∏–π" if lang == 'ru' else "English"
        return LANGUAGES[lang]['language_changed'].format(lang=lang_name), LANGUAGES[lang]['welcome'].format(
            name=user_name)
    return None, None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
def get_timezone_by_city(city):
    try:
        geolocator = Nominatim(user_agent="telegram_bot")
        location = geolocator.geocode(city)
        if not location:
            return None
        tf = TimezoneFinder()
        timezone_name = tf.timezone_at(lat=location.latitude, lng=location.longitude)
        if timezone_name:
            pytz.timezone(timezone_name)
            return timezone_name
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
        raise


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ===
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
def ensure_language_keys(reply, lang):
    for key in LANGUAGES['ru']:
        if key not in reply:
            reply[key] = LANGUAGES['ru'][key]
    return reply

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def split_message(message, max_length=4096):
    parts, current_part, open_tags, i = [], "", [], 0
    while i < len(message):
        char = message[i]
        current_part += char
        if char == '<':
            tag = ""
            j = i
            while j < len(message) and message[j] != '>':
                tag += message[j]
                j += 1
            if j < len(message):
                tag += '>'
                i = j
                if tag.startswith('</'):
                    if open_tags and open_tags[-1] == tag.replace('</', '<'):
                        open_tags.pop()
                elif not tag.endswith('/>'):
                    open_tags.append(tag)
        if len(current_part) >= max_length:
            last_newline = current_part.rfind('\n', 0, max_length)
            split_pos = last_newline if last_newline != -1 else max_length
            parts.append(current_part[:split_pos])
            current_part = current_part[split_pos:]
        i += 1
    if current_part:
        parts.append(current_part)
    final_parts = []
    for part in parts:
        temp_open_tags = open_tags.copy()
        part_with_tags = part
        for tag in reversed(temp_open_tags):
            part_with_tags += tag.replace('<', '</').replace('>', '>')
        final_parts.append(part_with_tags)
    return final_parts

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ email —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def send_feedback_email(user_id, username, feedback):
    msg = MIMEText(f"Feedback from User ID: {user_id} (Username: {username})\n\n{feedback}")
    msg['Subject'] = f"Feedback from {username or 'Anonymous'}"
    msg['From'] = SMTP_EMAIL
    msg['To'] = DEVELOPER_EMAIL
    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(SMTP_EMAIL, SMTP_PASSWORD)
            server.send_message(msg)
    except smtplib.SMTPAuthenticationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}")
        raise Exception("Authentication failed. Check your email and password.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        raise


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram ===
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start, /recommend –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö/–¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    try:
        save_user(user.id, user.username, user.first_name)
        await update.message.reply_text(
            LANGUAGES[lang]['welcome'].format(name=user.first_name),
            reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
        )
    except psycopg2.Error:
        await update.message.reply_text(LANGUAGES[lang]['db_error'])
    except RetryAfter as e:
        await update.message.reply_text(LANGUAGES[lang]['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ start: {e}")
        await update.message.reply_text(LANGUAGES[lang]['error_message'])

# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def cancel_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    context.user_data["awaiting_city"] = False
    try:
        await update.callback_query.message.reply_text(
            LANGUAGES[lang]['cancel_timezone'],
            reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
        )
        await update.callback_query.message.delete()
    except RetryAfter as e:
        await update.callback_query.message.reply_text(LANGUAGES[lang]['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ cancel_timezone: {e}")
        await update.callback_query.message.reply_text(LANGUAGES[lang]['error_message'])

# –ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def change_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    context.user_data["awaiting_city"] = True
    try:
        await update.callback_query.message.reply_text(
            LANGUAGES[lang]['set_city'],
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(LANGUAGES[lang]['keep_moscow'], callback_data='keep_moscow')],
                [InlineKeyboardButton(LANGUAGES[lang]['cancel_button'], callback_data='cancel_timezone')]
            ])
        )
        await update.callback_query.message.delete()
    except RetryAfter as e:
        await update.callback_query.message.reply_text(LANGUAGES[lang]['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ change_timezone: {e}")
        await update.callback_query.message.reply_text(LANGUAGES[lang]['error_message'])

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def keep_moscow_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    context.user_data["awaiting_city"] = False
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("UPDATE users SET timezone = %s, timezone_set = %s WHERE id = %s",
                            ('Europe/Moscow', True, user.id))
                conn.commit()
        await update.callback_query.message.reply_text(LANGUAGES[lang]['timezone_set'].format(timezone='Europe/Moscow'))
        await show_history_with_filter(update, context, filter_type=None)
        try:
            await update.callback_query.message.delete()
        except BadRequest as e:
            logger.warning(f"Failed to delete message: {e}")
    except psycopg2.Error:
        await update.callback_query.message.reply_text(LANGUAGES[lang]['db_error'])
    except RetryAfter as e:
        await update.callback_query.message.reply_text(LANGUAGES[lang]['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ keep_moscow_timezone: {e}")
        await update.callback_query.message.reply_text(LANGUAGES[lang]['error_message'])

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
async def show_history_with_filter(update: Update, context: ContextTypes.DEFAULT_TYPE, filter_type=None):
    user = update.effective_user
    lang = get_language(context, user.id)
    reply = ensure_language_keys(LANGUAGES[lang], lang)
    message = update.callback_query.message if update.callback_query else update.message

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_size = 10
    current_page = context.user_data.get('history_page', 0)

    try:
        history = get_user_history(user.id)
        if not history:
            await message.reply_text(reply['history_empty'])
            if update.callback_query:
                try:
                    await update.callback_query.message.delete()
                except BadRequest as e:
                    logger.warning(f"Failed to delete message: {e}")
            return

        tz = pytz.timezone(get_user_timezone(user.id)[0])
        lines, current_group = [], None
        total_messages = len(history)
        start_idx = current_page * page_size
        end_idx = min((current_page + 1) * page_size, total_messages)

        for ts, msg in history[start_idx:end_idx]:
            if not ts.tzinfo:
                ts = ts.replace(tzinfo=pytz.UTC)
            local_time = ts.astimezone(tz)
            group_key = None
            if filter_type == 'day':
                group_key = local_time.strftime('%Y-%m-%d')
            elif filter_type == 'week':
                group_key = local_time.strftime('Week %U, %Y' if lang == 'en' else '–ù–µ–¥–µ–ª—è %U, %Y')
            elif filter_type == 'month':
                group_key = local_time.strftime('%B %Y')
            if group_key and group_key != current_group:
                lines.append(f"\n<b>{group_key}</b>")
                current_group = group_key
            formatted_time = local_time.strftime('%Y-%m-%d %H:%M:%S')
            msg = "\n".join([msg[i:i + 50] for i in range(0, len(msg), 50)]) if len(msg) > 50 else msg
            lines.append(f"{formatted_time}\n{msg}")

        if not lines:
            await message.reply_text(reply['history_empty'])
            if update.callback_query:
                try:
                    await update.callback_query.message.delete()
                except BadRequest as e:
                    logger.warning(f"Failed to delete message: {e}")
            return

        full_message = f"{reply['history']} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {((total_messages - 1) // page_size) + 1})\n\n" + "\n\n".join(
            lines)
        message_parts = split_message(full_message)

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = [
            [InlineKeyboardButton(reply['filter_day'], callback_data='filter_day'),
             InlineKeyboardButton(reply['filter_week'], callback_data='filter_week'),
             InlineKeyboardButton(reply['filter_month'], callback_data='filter_month')],
            [InlineKeyboardButton(reply['change_timezone'], callback_data='change_timezone')]
        ]
        if current_page > 0:
            keyboard.append([InlineKeyboardButton(reply['prev_page'], callback_data='prev_page')])
        if end_idx < total_messages:
            keyboard.append([InlineKeyboardButton(reply['next_page'], callback_data='next_page')])
        keyboard = InlineKeyboardMarkup(keyboard)

        for part in message_parts:
            await message.reply_text(part, parse_mode='HTML', reply_markup=keyboard)
        if update.callback_query:
            try:
                await update.callback_query.message.delete()
            except BadRequest as e:
                logger.warning(f"Failed to delete message: {e}")

    except psycopg2.Error:
        await message.reply_text(reply['db_error'])
        if update.callback_query:
            try:
                await update.callback_query.message.delete()
            except BadRequest as e:
                logger.warning(f"Failed to delete message: {e}")
    except RetryAfter as e:
        await message.reply_text(reply['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ show_history_with_filter: {e}")
        await message.reply_text(reply['error_message'])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    query = update.callback_query
    reply = ensure_language_keys(LANGUAGES[lang], lang)

    if query.data == 'next_page':
        context.user_data['history_page'] = context.user_data.get('history_page', 0) + 1
    elif query.data == 'prev_page':
        context.user_data['history_page'] = max(0, context.user_data.get('history_page', 0) - 1)

    await query.answer()
    await show_history_with_filter(update, context, filter_type=context.user_data.get('history_filter'))

# –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    reply = ensure_language_keys(LANGUAGES[lang], lang)
    query = update.message.text.replace('/recommend', '').strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message(user.id, f"/recommend {query}")

    if not query:
        response = reply['ru']['feedback_request'] if lang == 'ru' else reply['en']['feedback_request']
        await update.message.reply_text(response,
                                        reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True))
        save_message(user.id, response)
        return

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
        vector_results = find_recommendations(query, lang)

        if vector_results:
            recommendations_text = "\n".join([f"{r[0]}: {r[1]}" for r in vector_results])
            gemini_prompt = (
                f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∏–∑–Ω–µ—Å—É' if lang == 'ru' else 'User requested business recommendations'}: '{query}'.\n"
                f"{'–í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã' if lang == 'ru' else 'Here are preliminary recommendations from the database'}:\n{recommendations_text}\n"
                f"{'–£—Ç–æ—á–Ω–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏ —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.' if lang == 'ru' else 'Refine and enhance these recommendations to be as helpful and specific as possible for the business.'}"
            )
            enhanced_recommendations = Gemini(gemini_prompt)
            await update.message.reply_text(
                enhanced_recommendations,
                parse_mode='HTML',
                reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            save_message(user.id, enhanced_recommendations)
        else:
            gemini_prompt = (
                f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–∏–∑–Ω–µ—Å—É' if lang == 'ru' else 'User requested business recommendations'}: '{query}'.\n"
                f"{'–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞.' if lang == 'ru' else 'Provide specific and practical recommendations for improving the business.'}"
            )
            enhanced_recommendations = Gemini(gemini_prompt)
            await update.message.reply_text(
                enhanced_recommendations,
                parse_mode='HTML',
                reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            save_message(user.id, enhanced_recommendations)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ recommend: {e}")
        error_message = f"{reply['error_message']} {str(e)}"
        await update.message.reply_text(error_message,
                                        reply_markup=ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True))
        save_message(user.id, error_message)

def boldify(text):
    # –ó–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—É—é –ø–∞—Ä—É **...** –Ω–∞ <b>...</b>
    return re.sub(r"\*\*(.*?)\*\*", r'<b>\1</b>', text, flags=re.DOTALL)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ RFM
async def handle_result_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    reply = ensure_language_keys(LANGUAGES[lang], lang)
    query = update.callback_query
    keyboard = ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ RFM-–∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    result = context.user_data.get('rfm_result', {})
    format_choice = query.data  # 'table', 'diagram', –∏–ª–∏ 'text'



    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if format_choice == 'table' and result.get('result_table'):
            response = f"{reply['csv_success']}```{result['result_table']}```"
            await query.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
            save_message(user.id, response)
        elif format_choice == 'diagram' and result.get('plot_path') and os.path.exists(result['plot_path']):
            with open(result['plot_path'], 'rb') as plot_file:
                await query.message.reply_photo(photo=plot_file, caption="–ì—Ä–∞—Ñ–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ RFM" if lang == 'ru' else "RFM Segments Chart", reply_markup=keyboard)
                save_message(user.id, "–ì—Ä–∞—Ñ–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ RFM" if lang == 'ru' else "RFM Segments Chart")
        elif format_choice == 'text' and result.get('result_text'):
            await query.message.reply_text(result['result_text'], parse_mode='HTML', reply_markup=keyboard)
            save_message(user.id, result['result_text'])

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.get('corrections'):
            response = f"{reply['corrections_message']}```{result['corrections']}```"
            await query.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
            save_message(user.id, response)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if result.get('errors'):
            response = f"{reply['csv_error']}```{result['errors']}```"
            await query.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
            save_message(user.id, response)

        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏ –≤—ã–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result.get('result_text'):
            segment_counts = {}
            segments_ru = ['VIP-–∫–ª–∏–µ–Ω—Ç—ã', '–õ–æ—è–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', '–ù–æ–≤—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏', '–†–∏—Å–∫—É—é—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã', '–°–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã']
            segments_en = ['VIP Customers', 'Loyal Customers', 'New Customers', 'At-Risk Customers', 'Lost Customers']
            segments = segments_en if lang == 'en' else segments_ru

            for segment in segments:
                match = re.search(rf"{segment}:\n\s+{'–ö–ª–∏–µ–Ω—Ç–æ–≤' if lang == 'ru' else 'Customers'}: (\d+)", result['result_text'])
                if match:
                    segment_counts[segment] = int(match.group(1))

            if segment_counts:
                dominant_segment = max(segment_counts, key=segment_counts.get)
                recommendation_query = f"{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è' if lang == 'ru' else 'Recommendations for'} {dominant_segment.lower()} in a mass-market retail"
                vector_results = find_recommendations(recommendation_query, lang, dominant_segment)

                if vector_results:
                    recommendations_text = "\n".join([r[1] for r in vector_results])
                    gemini_prompt = (
                        f"{'RFM-–∞–Ω–∞–ª–∏–∑' if lang == 'ru' else 'RFM analysis'}:\n"
                        f"{'–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç' if lang == 'ru' else 'Dominant segment'}: {dominant_segment}\n"
                        f"{'–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' if lang == 'ru' else 'Preliminary recommendations'}:\n{recommendations_text}\n"
                        f"{'–£—Ç–æ—á–Ω–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –º–∞—Å—Å-–º–∞—Ä–∫–µ—Ç–∞. –ü–∏—à–∏ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ' if lang == 'ru' else 'Refine and provide actionable recommendations for a mass-market retail business.'}"
                    )
                    enhanced_recommendations = Gemini(gemini_prompt)
                    response = f"{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è' if lang == 'ru' else 'Recommendations for'} {dominant_segment}:\n{boldify(enhanced_recommendations)}"
                    await query.message.reply_text(response, parse_mode='HTML', reply_markup=keyboard)
                    save_message(user.id, response)
                else:
                    gemini_prompt = (
                        f"{'RFM-–∞–Ω–∞–ª–∏–∑' if lang == 'ru' else 'RFM analysis'}:\n"
                        f"{'–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç' if lang == 'ru' else 'Dominant segment'}: {dominant_segment}\n"
                        f"{'–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –º–∞—Å—Å-–º–∞—Ä–∫–µ—Ç–∞ (–ø–∏—à–∏ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ)' if lang == 'ru' else 'Provide actionable recommendations for a mass-market retail business.'}"
                    )

                    enhanced_recommendations = Gemini(gemini_prompt)
                    response = f"{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è' if lang == 'ru' else 'Recommendations for'} {dominant_segment}:\n{boldify(enhanced_recommendations)}"

                    await query.message.reply_text(response, parse_mode='HTML', reply_markup=keyboard)
                    save_message(user.id, response)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if result.get('plot_path') and os.path.exists(result['plot_path']):
            os.remove(result['plot_path'])
        context.user_data['rfm_result'] = None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    except RetryAfter as e:
        response = reply['retry_message'].format(seconds=e.retry_after)
        await query.message.reply_text(response, reply_markup=keyboard)
        save_message(user.id, response)
    except BadRequest as e:
        logger.error(f"BadRequest –≤ handle_result_format: {e}")
        response = reply['error_message']
        await query.message.reply_text(response, reply_markup=keyboard)
        save_message(user.id, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_result_format: {e}")
        response = f"{reply['csv_error']} {str(e)}"
        await query.message.reply_text(response, reply_markup=keyboard)
        save_message(user.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = get_language(context, user.id)
    text, reply = update.message.text, ensure_language_keys(LANGUAGES[lang], lang)
    keyboard = ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
    try:
        if is_muted(user.id):
            await update.message.reply_text(reply['mute_message'], reply_markup=keyboard)
            return
        save_message(user.id, text)
        update_last_message_time(user.id)
        if get_recent_message_count(user.id) > 15:
            mute_user(user.id)
            await update.message.reply_text(reply['mute_message'], reply_markup=keyboard)
            return
    except psycopg2.Error:
        await update.message.reply_text(reply['db_error'], reply_markup=keyboard)
        return
    if context.user_data.get("awaiting_city", False):
        try:
            timezone_name = get_timezone_by_city(text)
            if timezone_name:
                context.user_data["custom_timezone"] = timezone_name
                with get_db_connection() as conn:
                    with conn.cursor() as cur:
                        cur.execute("UPDATE users SET timezone = %s, timezone_set = %s WHERE id = %s",
                                    (timezone_name, True, user.id))
                        conn.commit()
                await update.message.reply_text(reply['timezone_set'].format(timezone=timezone_name))
                context.user_data["awaiting_city"] = False
                await show_history_with_filter(update, context)
            else:
                await update.message.reply_text(
                    reply['invalid_city'].format(city=text),
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(reply['keep_moscow'], callback_data='keep_moscow')],
                        [InlineKeyboardButton(reply['cancel_button'], callback_data='cancel_timezone')]
                    ])
                )
        except Exception:
            await update.message.reply_text(
                reply['geocoder_error'],
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(reply['keep_moscow'], callback_data='keep_moscow')],
                    [InlineKeyboardButton(reply['cancel_button'], callback_data='cancel_timezone')]
                ])
            )
        return
    if context.user_data.get("awaiting_feedback", False):
        try:
            await send_feedback_email(user.id, user.username, text)
            await update.message.reply_text(reply['feedback_sent'], reply_markup=keyboard)
            context.user_data["awaiting_feedback"] = False
        except Exception:
            await update.message.reply_text(reply['feedback_error'], reply_markup=keyboard)
        return
    if context.user_data.get("awaiting_csv", False):
        await update.message.reply_text(reply['csv_request'], reply_markup=keyboard)
        return
    actions = {
        "üìä –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏–∑–Ω–µ—Å–∞": lambda: (reply['csv_request'], None),
        "üìä Customer Business Evaluation": lambda: (reply['csv_request'], None),
        "‚ÑπÔ∏è –û –Ω–∞—Å": lambda: reply['about'],
        "‚ÑπÔ∏è About Us": lambda: reply['about'],
        "üÜò –ü–æ–º–æ—â—å": lambda: reply['help'],
        "üÜò Help": lambda: reply['help'],
        "üóë –û—á–∏—Å—Ç–∫–∞": lambda: (reply['confirm_clear'],
                              ReplyKeyboardMarkup([[reply['yes_button'], reply['no_button']]], resize_keyboard=True,
                                                  one_time_keyboard=True)),
        "üóë Clear": lambda: (reply['confirm_clear'],
                            ReplyKeyboardMarkup([[reply['yes_button'], reply['no_button']]], resize_keyboard=True,
                                                one_time_keyboard=True)),
        "üåê –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è": lambda: (reply['feedback_request'].format(email=DEVELOPER_EMAIL), None),
        "üåê Suggestions and Feedback": lambda: (reply['feedback_request'].format(email=DEVELOPER_EMAIL), None),
        "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Change Language": lambda: set_language(context, 'en' if lang == 'ru' else 'ru',
                                                                 user.first_name),
        reply['yes_button']: lambda: (clear_history(user.id) or reply['cleared'], keyboard),
        reply['no_button']: lambda: (reply['cancel_clear'], keyboard)
    }
    if text in ["üïì –ò—Å—Ç–æ—Ä–∏—è", "üïì History"]:
        try:
            timezone, timezone_set = get_user_timezone(user.id)
            if not timezone_set:
                context.user_data["awaiting_city"] = True
                await update.message.reply_text(
                    reply['set_city'],
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton(reply['keep_moscow'], callback_data='keep_moscow')],
                        [InlineKeyboardButton(reply['cancel_button'], callback_data='cancel_timezone')]
                    ])
                )
            else:
                await show_history_with_filter(update, context)
        except psycopg2.Error:
            await update.message.reply_text(reply['db_error'], reply_markup=keyboard)
        return
    action = actions.get(text)
    if action:
        result = action()
        if isinstance(result, tuple):
            if result[1] is None and text in ["üìä –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏–∑–Ω–µ—Å–∞", "üìä Customer Business Evaluation"]:
                context.user_data["awaiting_csv"] = True
                await update.message.reply_text(result[0], reply_markup=keyboard)
            elif result[1] is None:
                context.user_data["awaiting_feedback"] = True
                await update.message.reply_text(result[0])
            elif result[1] and isinstance(result[1], str):  # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
                new_lang = get_language(context, user.id)
                new_keyboard = ReplyKeyboardMarkup(LANGUAGES[new_lang]['menu'], resize_keyboard=True)
                await update.message.reply_text(result[0], reply_markup=new_keyboard)
                await update.message.reply_text(result[1], reply_markup=new_keyboard)
            else:
                await update.message.reply_text(result[0], reply_markup=result[1])
        else:
            await update.message.reply_text(result, reply_markup=keyboard)
    else:
        await update.message.reply_text(boldify(Gemini(text+"(–ø–∏—à–∏ –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ")), parse_mode='HTML', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (CSV-—Ñ–∞–π–ª–æ–≤)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        await update.message.reply_text("Error: User not found.")
        return
    lang = get_language(context, user.id)
    reply = ensure_language_keys(LANGUAGES[lang], lang)
    keyboard = ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
    try:
        if is_muted(user.id):
            await update.message.reply_text(reply['mute_message'], reply_markup=keyboard)
            return
        doc = update.message.document
        if not doc.file_name.lower().endswith('.csv'):
            await update.message.reply_text(f"{reply['csv_error']} –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.",
                                            reply_markup=keyboard)
            return
        file_name = doc.file_name or 'file.csv'
        save_message(user.id, f"File uploaded: {file_name}")
        update_last_message_time(user.id)
        file = await doc.get_file()
        file_path = os.path.join(os.getcwd(), file_name)
        async with aiohttp.ClientSession() as session:
            async with session.get(file.file_path) as response:
                if response.status == 200:
                    with open(file_path, 'wb') as f:
                        f.write(await response.read())
        if context.user_data.get("awaiting_csv", False):
            # –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ CSV
            df = pd.read_csv(file_path)
            preview = f"\n{df.head().to_string(index=False)}"
            await update.message.reply_text(f"{reply['csv_loaded']}```\n{preview}\n```", parse_mode='MarkdownV2')

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ RFM-–∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å RFM
            result = RFM.main(file_path)
            context.user_data["awaiting_csv"] = False
            context.user_data['rfm_result'] = result  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞

            # –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await update.message.reply_text(
                reply['csv_format_choice'],
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(reply['table_button'], callback_data='table'),
                        InlineKeyboardButton(reply['diagram_button'], callback_data='diagram'),
                        InlineKeyboardButton(reply['text_button'], callback_data='text')
                    ]
                ])
            )
        else:
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä CSV –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
            df = pd.read_csv(file_path)
            await update.message.reply_text(f"–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ:```\n{f"\n{df.head().to_string(index=False)}"}\n```",
                                            parse_mode='MarkdownV2', reply_markup=keyboard)
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(file_path):
            os.remove(file_path)
    except psycopg2.Error:
        await update.message.reply_text(reply['db_error'], reply_markup=keyboard)
    except Exception as e:
        await update.message.reply_text(f"{reply['csv_error']} {str(e)}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}: {context.error}", exc_info=context.error)
    user_id = update.effective_user.id if update.effective_user else 0
    lang = get_language(context, user_id)
    reply = ensure_language_keys(LANGUAGES[lang], lang)
    keyboard = ReplyKeyboardMarkup(LANGUAGES[lang]['menu'], resize_keyboard=True)
    try:
        target = update.message or update.callback_query.message
        await target.reply_text(reply['error_message'], reply_markup=keyboard)
    except RetryAfter as e:
        await target.reply_text(reply['retry_message'].format(seconds=e.retry_after))
    except BadRequest as e:
        logger.error(f"BadRequest –≤ error_handler: {e}")
        await target.reply_text(reply['error_message'])


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ polling
# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    init_db()
    init_recommendations()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("recommend", recommend))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(CallbackQueryHandler(cancel_timezone, pattern='cancel_timezone'))
    app.add_handler(CallbackQueryHandler(keep_moscow_timezone, pattern='keep_moscow'))
    app.add_handler(CallbackQueryHandler(change_timezone, pattern='change_timezone'))
    app.add_handler(CallbackQueryHandler(show_history_with_filter, pattern='filter_(day|week|month)'))
    app.add_handler(CallbackQueryHandler(handle_pagination, pattern='prev_page|next_page'))
    app.add_handler(CallbackQueryHandler(handle_result_format, pattern='table|diagram|text'))
    app.add_error_handler(error_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling

if __name__ == '__main__':
    main()